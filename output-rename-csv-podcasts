#!/bin/bash

declare -A src_dir_array
declare -a skipped_files_array

script_name=$(basename "$0")
logfile="/var/projects/ltr_podcasts/logs/output-rename-csv/${script_name}_$(date +%Y%m%d_%H%M).log"

## This would be changed to the download directory after testing
#parent_dir="/var/projects/ltr_podcasts/testing"
parent_dir="/var/projects/ltr_podcasts/downloads"
converted_dest_dir="/var/projects/ltr_podcasts/converted/"

inc_pattern="^.*\.(mp3|mp2|wav|docx|doc|aif|MP3|MP2|WAV|DOCX|DOC|AIF)$"

if [[ -d "./csv" ]]; then
    mkdir -p "./csv"
fi

csv_outfile="./csv/csv_outfile.csv"

if [[ -e "$csv_outfile" ]]; then
    mv "$csv_outfile" "${csv_outfile}_$(date +%Y%m%d_%H%M)"
fi

touch "$csv_outfile"

## Add headers to csv_outfile
echo -e "**** $(date +%Y%m%d_%H%M) ****\norg_file_name,(new) file_name,path" >> "$csv_outfile"

src_dir_array[ail]="American Indian Living"
src_dir_array[bt]="Bible Talk"
src_dir_array[ec]="Education Currents"
src_dir_array[hal]="Health and Longevity"
src_dir_array[hbc]="Healthy By Choice"
src_dir_array[hm]="Heartwise Ministries"
src_dir_array[hc]="Homeschool Companion"
src_dir_array[lqa]="LifeQuest - Authors"
src_dir_array[lqlfal]="LifeQuest - Love For a Lifetime"
src_dir_array[lql]="LifeQuest Liberty"
src_dir_array[moh]="Message of Hope"
src_dir_array[stb]="Sink The Beagle"
src_dir_array[scpm]="Someone Cares Prison Ministry"



get_output_file() {

    #echo "get_output_file() - "
    if [[ -f "$src_file" ]]; then
        if [[ $src_file == *\.* ]]; then
            #echo "$src_file" | awk 'BEGIN{FS=OFS="."}{ NF--; print }'

            ######################################
            #### BEGIN file_name manipulation ####
            ######################################
            ## split on '/' and take only the last field
            org_file_name="$(echo "$src_file" | awk 'BEGIN{FS=OFS="/"}{ print $(NF) }')"
            
            ## trim commas out 
            org_file_name="$(echo "$org_file_name" | tr ',' ' ')"

            ## split on '.', remove the final field (hopefully the .ext), take the last field (prev. 2nd to last) and add '.mp3'
            file_name="$(echo "$src_file" | awk 'BEGIN{FS=OFS="."}{ NF--; print }' | awk 'BEGIN{FS=OFS="/"}{ print $(NF) ".mp3" }')"
            
            ## trim commas out
            file_name="$(echo "$file_name" | tr ',' ' ')"
            
            # en dash
            # tr had trouble outputing weird characters with the en dash replacement
            file_name="$(echo "$file_name" | sed -e "s/–/\ /g")"

            # acute accent ´
            # left single quote mark ‘
            # right single quote mark ’
            # single high reversed 9 quote mark ‛
            # prime ′
            # reversed prime ‵
            ## cannot  make tr or sed deal with backtick\grave accent properly
            # grave accent `

            # singles
            file_name="$(echo "$file_name" | sed -e "s/´/\ /g")"
            file_name="$(echo "$file_name" | sed -e "s/‘/\ /g")"
            file_name="$(echo "$file_name" | sed -e "s/’/\ /g")"
            file_name="$(echo "$file_name" | sed -e "s/‛/\ /g")"
            file_name="$(echo "$file_name" | sed -e "s/′/\ /g")"
            file_name="$(echo "$file_name" | sed -e "s/‵/\ /g")"

            # double acute accent ˝
            # left double quote mark “
            # right double quote mark ”
            # doulbe high-reversed-9 quote mark ‟
            # double prime ″
            # reveresed double prime ‶
            
            # doubles
            file_name="$(echo "$file_name" | sed -e 's/˝/\ /g')"
            file_name="$(echo "$file_name" | sed -e 's/“/\ /g')"
            file_name="$(echo "$file_name" | sed -e 's/”/\ /g')"
            file_name="$(echo "$file_name" | sed -e 's/‟/\ /g')"
            file_name="$(echo "$file_name" | sed -e 's/″/\ /g')"
            file_name="$(echo "$file_name" | sed -e 's/‶/\ /g')"

            ## replace uppercase to lowercase
            file_name="$(echo "$file_name" | tr '[:upper:]' '[:lower:]')"
            
            ## replaced " - " with " ", sometimes many times in a filename
            file_name="$(echo "$file_name" | sed -e 's/\ -\ /\ /g')"
            #file_name="$(echo "$file_name" | sed -e 's/\ -\ /\ /')"
            #file_name="$(echo "$file_name" | sed -e 's/\ -\ /\ /')"
            #file_name="$(echo "$file_name" | sed -e 's/\ -\ /\ /')"

            ## remove dashes
            file_name="$(echo "$file_name" | sed -e 's/-/\ /g')"

            ## remove '.' not before 'm's 
            file_name="$(echo "$file_name" | sed -e 's/\.[^m]//g')"

            ## replace '.m.' with 'm', to leave .mp3 alone
            file_name="$(echo "$file_name" | sed -e 's/\.m\./m/g')"

            ## remove _(ok|final|remixed)
            file_name="$(echo "$file_name" | sed -e 's/\_final//')"
            #file_name="$(echo "$file_name" | sed -e 's/\_remixed//')"
            file_name="$(echo "$file_name" | sed -e 's/\_ok//')"

            ## remove \ (final|ok|remixed). with '.'
            file_name="$(echo "$file_name" | sed -e 's/\ final\./\./')"
            #file_name="$(echo "$file_name" | sed -e 's/\ remixed\./\./')"
            file_name="$(echo "$file_name" | sed -e 's/\ ok\./\./')"

            ## replace -{2,} with ' '
            file_name="$(echo "$file_name" | sed -e 's/-\{2,\}/ /g')"

            ## remove ,
            file_name="$(echo "$file_name" | sed -e 's/,//g')"

            ## replace \ {2,} with single ' '
            file_name="$(echo "$file_name" | sed -e 's/\ \{2,\}/ /g')"
            
            ## translate space to underscore
            file_name="$(echo "$file_name" | tr ' ' '_')"
        
            ## replace _{2,} with '_' 
            file_name="$(echo "$file_name" | sed -e 's/_\{2,\}/_/g')"
            #file_name="$(echo "$file_name" | sed -e 's/__\+/_/')"

            #### END file_name manipulation ####

            ######################################
            #### BEGIN dest. dir manipuation  ####
            ######################################
            old_file_sub_path="$(echo "$src_file" | awk 'BEGIN{FS=OFS="/"}{NF--; print }' | cut -d/ -f6- )"
            file_sub_path="$(echo "$src_file" | awk 'BEGIN{FS=OFS="/"}{NF--; print }' | cut -d/ -f7- )"
            file_sub_path="$key/$file_sub_path"

            ## trim commas out
            file_sub_path="$(echo "$file_sub_path" | tr ',' ' ')"
            
            ## trim en dash out
            file_sub_path="$(echo "$file_sub_path" | tr '–' ' ')"
            
            ## replace uppercase to lowercase
            file_sub_path="$(echo "$file_sub_path" | tr '[:upper:]' '[:lower:]')"
            
            ## replaced " - " with " ", sometimes many times in a filename
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/\ -\ /\ /g')"
            #file_sub_path="$(echo "$file_sub_path" | sed -e 's/\ -\ /\ /')"
            #file_sub_path="$(echo "$file_sub_path" | sed -e 's/\ -\ /\ /')"
            #file_sub_path="$(echo "$file_sub_path" | sed -e 's/\ -\ /\ /')"

            ## remove dashes
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/-/\ /g')"

            # en dash
            # tr had trouble outputing weird characters with the en dash replacement
            file_sub_path="$(echo "$file_sub_path" | sed -e "s/–/\ /g")"

            # acute accent ´
            # left single quote mark ‘
            # right single quote mark ’
            # single high reversed 9 quote mark ‛
            # prime ′
            # reversed prime ‵
            ## cannot  make tr or sed deal with backtick\grave accent properly
            # grave accent `

            # singles
            file_sub_path="$(echo "$file_sub_path" | sed -e "s/´/\ /g")"
            file_sub_path="$(echo "$file_sub_path" | sed -e "s/‘/\ /g")"
            file_sub_path="$(echo "$file_sub_path" | sed -e "s/’/\ /g")"
            file_sub_path="$(echo "$file_sub_path" | sed -e "s/‛/\ /g")"
            file_sub_path="$(echo "$file_sub_path" | sed -e "s/′/\ /g")"
            file_sub_path="$(echo "$file_sub_path" | sed -e "s/‵/\ /g")"

            # double acute accent ˝
            # left double quote mark “
            # right double quote mark ”
            # doulbe high-reversed-9 quote mark ‟
            # double prime ″
            # reveresed double prime ‶
            
            # doubles
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/˝/\ /g')"
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/“/\ /g')"
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/”/\ /g')"
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/‟/\ /g')"
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/″/\ /g')"
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/‶/\ /g')"

            ## remove '.' not before 'm's 
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/\.[^m]//g')"

            ## replace '.m.' with 'm', to leave .mp3 alone
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/\.m\./m/g')"

            ## remove _(ok|final|remixed)
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/\_final//')"
            #file_sub_path="$(echo "$file_sub_path" | sed -e 's/\_remixed//')"
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/\_ok//')"

            ## remove \ (final|ok|remixed). with '.'
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/\ final\./\./')"
            #file_sub_path="$(echo "$file_sub_path" | sed -e 's/\ remixed\./\./')"
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/\ ok\./\./')"

            ## replace -{2,} with ' '
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/-\{2,\}/ /g')"

            ## remove ,
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/,//g')"

            ## replace \ {2,} with single ' '
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/\ \{2,\}/ /g')"
            
            ## translate space to underscore
            file_sub_path="$(echo "$file_sub_path" | tr ' ' '_')"
        
            ## replace _{2,} with '_' 
            file_sub_path="$(echo "$file_sub_path" | sed -e 's/_\{2,\}/_/g')"

            #### END dest. dir manipuation  ####

            #echo "src_file: $src_file"
            #echo "old_sub_path: $old_file_sub_path"
            #echo "sub_path: $file_sub_path"

            echo "${org_file_name},${file_name},${file_sub_path}" >> "$csv_outfile"


            filetype="$file_extension"

            converted_path="$converted_dest_dir$file_sub_path"
            converted_filepath="$converted_path/$file_name.mp3"

            if ! [[  -d "$converted_path" ]]; then
                mkdir -p "$converted_path";
            fi
            
        fi
    fi

}

check_files() {
    # Arguments:
    # 1 -> src_dir
    src_dir="$1"
    #echo "check_files() - src_dir is $src_dir"

    find "$src_dir" -type f -print0 |
      while IFS= read -r -d $'\0' src_file; do
          
          get_output_file "$src_file"
    done
}
main() {


for key in "${!src_dir_array[@]}"; do
    src_dir="${src_dir_array[$key]}"

    src_dir="$parent_dir/$src_dir/"

    if [[ -d "$src_dir" ]]; then
        echo "main() - src_dir is $src_dir";

        check_files "$src_dir";
    else
        echo "main() - scr_dir as ''$src_dir'' is not valid"
    fi
done
echo "final count: $count"
echo "These files were skipped: ${skipped_files_array[@]}"
}


main

