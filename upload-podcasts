#!/bin/bash

declare -A dir_array

project_dir="/var/projects/ltr_podcasts"

script_dir="/var/projects/ltr_podcasts/scripts"

logs_dir="/var/projects/ltr_podcasts/scripts/logs"

script_name=$(basename "$0")
logfile="${logs_dir}/${script_name}_$(date +%Y%m%d_%H%M).log"
touch $logfile

## This would be changed to the download directory after testing
#parent_dir="${project_dir}/testing"
#parent_dir="${project_dir}/downloads"
converted_dir="${project_dir}/converted/"

inc_pattern="^.*\.(mp3|mp2|wav|docx|doc|aif|MP3|MP2|WAV|DOCX|DOC|AIF)$"

skipped_file="${logs_dir}/skipped"

if [[ -f "$skipped_file" ]]; then
    mv "$skipped_file" "${skipped_file}_$(date +%Y%m%d_%H%M)"
fi

touch "$skipped_file"

echo -e "**** $(date +%Y%m%d_%H%M) ****" >> "$skipped_file"

expected_file="${logs_dir}/expected"

if [[ -f "$expected_file" ]]; then
    mv "$expected_file" "${expected_file}_$(date +%Y%m%d_%H%M)"
fi

touch "$expected_file"

echo -e "**** $(date +%Y%m%d_%H%M) ****" >> "$expected_file"

copied_file="${logs_dir}/copied"

if [[ -f "$copied_file" ]]; then
    mv "$copied_file" "${copied_file}_$(date +%Y%m%d_%H%M)"
fi

touch "$copied_file"

echo -e "**** $(date +%Y%m%d_%H%M) ****" >> "$copied_file"

#dir_array[ail]="ail" #"American Indian Living"
#dir_array[bt]="bt" #"Bible Talk"
#dir_array[ec]="ec" #"Education Currents"
#dir_array[hal]="hal" #"Health and Longevity"
#dir_array[hbc]="hbc" #"Healthy By Choice"
#dir_array[hm]="hm" #"Heartwise Ministries"
#dir_array[hc]="hc" #"Homeschool Companion"
#dir_array[lqa]="lqa" #"LifeQuest - Authors"
#dir_array[lqlfal]="lqlfal" #"LifeQuest - Love For a Lifetime"
#dir_array[lql]="lql" #"LifeQuest Liberty"
#dir_array[moh]="moh" #"Message of Hope"
#dir_array[stb]="stb" #"Sink The Beagle"
#dir_array[scpm]="scpm" #"Someone Cares Prison Ministry"

skip_file() {
    # Arguments:
    # $1 -> $src_file
    # $2 -> $skipped_reason
    #    one of: src not found | dest exists | bad filename | bad filetype
    src_file="$1"
    skipped_reason="$2"
    #echo "skip_file()"

    echo "Skipping..."
    echo "[$skipped_reason] $src_file"  >>  "$skipped_file"

}



## determine years of files
get_year() {
    # Arguments:
    # $1 -> src_file
    ## testing
    # $2 -> test_date
    src_file="$1"
    cur_year="$(date +%Y)"
    tag_year=''
    #echo "get_year() for $src_file" >> $logfile 2>&1 

    ## testing
    #file_date="$(eyeD3 -log-level errors "$src_file" >> $logfile 2>&1)"
    file_date="$test_date"
    if [[ -z "$file_date" ]]; then
        #echo "received empty date. Setting cur_year" >> $logfile 2>&1
        received="BAD"
        tag_year="$cur_year"
    else
        if [[ ${#file_date} -ge 4 ]]; then
            #echo "received date is too short. Setting cur_year" >> $logfile 2>&1
            received="BAD"
            tag_year=$"cur_year"
        else
            snip_four="$(echo "${file_date:0:4}")"
            if [[ "$snip_four" =~ ^[^0-9]+$ ]]; then
                #echo "recieved first four of date not digits. Setting cur_year" >> $logfile 2>&1
                received="BAD"
                tag_year="$cur_year"
            else
                first_char="$(echo "${snip_four:0:1}")"
                second_char="$(echo "${snip_four:1:1}")"
                third_char="$(echo "${snip_four:2:1}")"
                fourth_char="$(echo "${snip_four:3:1}")"
                case "$first_char" in
                    2)
                        if [[ "$second_char" =~ ^[^0]$ ]]; then
                            #echo "received invalid year. Setting cur_year" >> $logfile 2>&1
                            received="BAD"
                            tag_year="$cur_year"
                        else
                            if [[ "$third_char" =~ ^[1]$ ]]; then
                                if [[ "$fourth_char" =~ ^[^0-8]$ ]]; then
                                    #echo "received invalid year. Setting cur_year" >> $logfile 2>&1
                                    received="BAD"
                                    tag_year="$cur_year"
                                else
                                    tag_year="$snip_four"
                                    received="GOOD"
                                fi
                            elif [[ "$third_char" =~ ^[^0]$ ]]; then
                                    #echo "received invalid year. Setting cur_year" >> $logfile 2>&1
                                    received="BAD"
                                    tag_year="$cur_year"
                            else
                                tag_year="$snip_four"
                                received="GOOD"
                            fi
                        fi
                        ;;
                    1) 
                        if [[ "$second_char" =~ ^[^8-9]$ ]]; then
                            #echo "received invalid year. Setting cur_year" >> $logfile 2>&1
                            received="BAD"
                            tag_year="$cur_year"
                        else
                            tag_year="$snip_four"
                            received="GOOD"
                        fi
                        ;;
                    *)
                        #echo "received invalid year. Setting cur_year" >> $logfile 2>&1
                        received="BAD"
                        tag_year="$cur_year"
                        ;;
                esac
            fi
        fi
    fi

    ## testing
    echo "$received:$tag_year"
}

declare -A test_dates
test_dates[abcd]="BAD"
test_dates[1]="BAD"
test_dates[3000]="BAD"
test_dates[2111-15-23]="BAD"
test_dates[2020-03-04]="BAD"
test_dates[1b99-00-00]="BAD"
test_dates[19ab-23-12]="BAD"
test_dates[2019-23-12]="BAD"
test_dates[2019-23-12]="BAD"
test_dates[1700-23-12]="BAD"
test_dates[2012-12-11]="GOOD"
test_dates[2012-12]="GOOD"
test_dates[2000-12-12]="GOOD"
test_dates[1999-18-81]="GOOD"
test_dates[2009]="GOOD"
test_dates[1810]="GOOD"

test_get_year() {
    for key in "${!test_dates[@]}"; do
        response="$(get_year "$key")"
        received="$(echo "$response" | awk 'BEGIN{FS=OFS=":"}{ print $1 }')"
        received_year="$(echo "$response" | awk 'BEGIN{FS=OFS=":"}{ print $2 }')"
        expected="${test_dates[$key]}"

        if [[ "$expected" == "$received" ]]; then
            echo "PASSED"
            echo "expected: $expected"
            echo "received: $received"
            echo "$key : $received_year"
        else
            echo "SOMETHING IS WRONG"
            echo "expected: $expected"
            echo "received: $received"
            echo "$key : $received_year"
        fi
    done
    }
   
    test_get_year

        

## determine folders

## upload

## output list of uploaded files

copy_files() {
    # Arguments:
    # 1 -> src_dir
    src_dir="$1"
    key="$2"
    #echo "check_files() - src_dir is $src_dir"

    find "$src_dir" -type f -print0 |
      while IFS= read -r -d $'\0' src_file; do
          file_year="$(get_year "$src_file")"



done

}

main() {

    echo -e "**** $(date +%Y%m%d_%H%M) ****" >> "$logfile"
    echo -e "**** Start of script ****" >> "$logfile"
    echo -e "ffmpeg loglevel set to ''errors only''"
    echo -e "do not expect further status updates until end of script"
    echo -e "Looking at these source directories:" >> "$logfile"

    for key in "${!dir_array[@]}"; do
        src_dir="${dir_array[$key]}"
        echo "$src_dir" >> "$logfile"
    done

    for key in "${!dir_array[@]}"; do
        src_dir="${dir_array[$key]}"

        src_dir="$converted_dir/$src_dir/"

        if [[ -d "$src_dir" ]]; then
            echo "main() - src_dir is $src_dir";

            copy_files "$src_dir" "$key";

        else
            echo "main() - scr_dir as ''$src_dir'' is not valid"
        fi
    done


}
