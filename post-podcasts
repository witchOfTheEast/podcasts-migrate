#!/bin/bash

##Creates new podcast episode posts on LTR dev website
#Podcast conversion script callis this script whenever any src_files successfully uploaded onto S3, passing the src_file's S3 URL (https://s3.us-east-2.amazonaws.com/ltrpodcasts/PATH/TO/FILE).

#Read src_file's ID3 tags for podcast title, podcast album name, podcast description, podcast release date.
	
#Loop through each src_file in "s3-uploads" folder.
#for src_file in /var/downloads/podcasts/s3-uploads

## randall replaced this logic iterating over files in a source director
## replaced with a csv file output from the upload-podcasts script
## csv file contacts src_file file path and name as well as the file url on s3

#src_dir="/var/downloads/podcasts/s3-uploads/"
#find "$src_dir" -type f -print0 |
#    while IFS= read -r -d $'\0' src_file; do
#cd "$src_dir"
#for src_file in $(ls "$src_dir"); do


script_name="$(basename "$0")"
usage() {
    echo -e "Usage: ${script_name} /PATH/TO/OUTPUT_FILE_FROM_UPLOAD_SCRIPT\n"
    echo -e "expect file to be csv\nexpect each file line to have 2 fields\nexpect field 1 to be the full file path\nexpect filed 2 to be the upload url"

}

logs_dir="/var/projects/ltr_podcasts/scripts/logs/post"
if ! [[ -d "$logs_dir" ]]; then
    mkdir -p "$logs_dir"
fi

skipped_file="${logs_dir}/${script_name}_skipped"
if [[ -f "$skipped_file" ]]; then
    mv "$skipped_file" "${skipped_file}_$(date +%Y%m%d_%H%M)"
fi
echo -e "**** $(date +%Y%m%d_%H%M) ****" >> "$skipped_file"

logfile="${logs_dir}/${script_name}_log"
if [[ -f "$logfile" ]]; then
    mv "$logfile" "${logfile}_$(date +%Y%m%d_%H%M)"
fi
echo -e "**** $(date +%Y%m%d_%H%M) ****" >> "$logfile"

## $# is number of parameters passed on cli
if [[ $# != 1 ]]; then
    usage
    exit 1
fi

## checks if the supplied argument is a existing file
if ! [[ -f "$1" ]]; then
    usage
    exit 1
else
    output_file_from_upload="$1"
fi

while IFS='' read -r line; do

    if ! [[ $line =~ "****" ]]; then

        src_file="$(echo "$line" | awk 'BEGIN{FS=OFS=","}{ print $1 }')"
        file_url="$(echo "$line" | awk 'BEGIN{FS=OFS=","}{ print $2 }')"

        #echo -e "\nsrc_file is $src_file\n"

        #Create variables of ID3 tags.
        post_title="$(eyeD3 --plugin=display -p "%t%" "$src_file" 2> /dev/null)"
        post_date="$(eyeD3 --plugin=display -p "%original-release-date%" "$src_file" 2> /dev/null)"
        post_album="$(eyeD3 --plugin=display -p "%A%" "$src_file" 2> /dev/null)"
        post_track_num="$(eyeD3 --plugin=display -p "%n%" "$src_file" 2> /dev/null)"   

        if [[ -n "$post_title" ]] && [[ -n "$post_album" ]] && [[ -n "$post_track_num" ]] && [[ -n "$post_date" ]]; then
            post_description="$(eyeD3 --plugin=display -p "%c%" "$src_file" 2> /dev/null)"
            #Insure date is in the format:YYYY-MM-DD with a catch-all.
            #echo -e "\nactive date in question: $post_date"
            echo $post_date | egrep -q '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            exitstatus="$?"

            if [[ $exitstatus -ne 0 ]]; then
                #echo "$post_date didn't match accepted format"
                    post_date="$(date "+%Y-%m-%d")"
                else
                    #echo "format seemed okay. trying ''date'' on $post_date"
                date "+%Y-%m-%d" -d "$post_date" > /dev/null  2>&1
                date_exitstatus="$?"

                    if [[ $date_exitstatus -eq 1 ]]; then
                        #echo "date seemed to think $post_date isn't a real date"
                        post_date="$(date "+%Y-%m-%d")"
                    fi
            fi
            #echo "at the end, our date is: $post_date"

            post_year="$(echo $post_date | egrep -o '[0-9]{4}')"
            #echo "this is just the year: $post_year"

            post_artist="$(eyeD3 --plugin=display -p "%a%" "$src_file" 2> /dev/null)"
            post_artist_lcns="$(echo "$post_artist" | sed -e 's/./\L&/g; s/ /-/g')"

            podcast_name_lcns=${podcast_name_lcns/&/and}
            post_album=${post_album/&/and}
            #echo $post_album
            podcast_name_lcns="$( echo "$post_album" | sed -e 's/./\L&/g; s/ /-/g')"
            #echo "podcast_name_lcns is: $podcast_name_lcns"
            taxonomy_child_term="$(echo "$post_year"-"$podcast_name_lcns")"
                    

            #List of variables of podcast thumbnail images
            #echo $podcast_name_lcns
            #postcast_test="$(echo "$postcast_name_lcns" | sed -e 's/-/and/g')"

            case $podcast_name_lcns in
                "american-indian-living")
                    wp_thumbnail="1487"
                    ;; 
                "bible-talk")
                    wp_thumbnail="1502"
                    ;; 
                "chip")
                    wp_thumbnail="1668"
                    ;;
                "education-currents")
                    wp_thumbnail="1523"
                    ;;
                "health-and-longevity")
                    wp_thumbnail="1541"
                    ;;
                "heartwise")
                    wp_thumbnail="1545"
                    ;;
                "homeschool-companion")
                    wp_thumbnail="1547"
                    ;;
                "lifequest")
                    wp_thumbnail="1572"
                    ;;
                "lifequest-liberty")
                    wp_thumbnail="1670"
                    ;;
                "message-of-hope")
                    wp_thumbnail="2063"
                    ;;
                "sink-the-beagle")
                    wp_thumbnail="1650"
                    ;;
                "someone-cares-prison-ministry")
                    wp_thumbnail="1613"
                    ;;
                *)
                    echo "Error! Name doesn't match! 1"
                    echo "Error! Name doesn't match!" >> $logfile
                    ;;
            esac

            #echo $src_file
           
    ## original wp_meta
    #        wp_meta=$( echo "--meta_input='{\"enclosure\":\""https://s3.us-east-2.amazonaws.com/ltrpodcasts/education-currents/2018/Godspeed-Voices-of-the-Reformation-David-Teems.mp3"\",\""_thumbnail_id"\":\""$wp_thumbnail"\"}'" )	

    ## randall modified wp_meta
            wp_meta="$(echo "--meta_input='{\"enclosure\":\""$file_url"\",\""_thumbnail_id"\":\""$wp_thumbnail"\"}'")"

            #SSH into dev server and create new post of podcast episode.
         #   echo "wp post create --post_content=\"$post_description\" --post_title=\"$post_title\" --post_date=\"$post_date\" --post_status=publish --post_type=podcasts $wp_meta --porcelain --path=/var/www/html/lifetalk.net/public_html/"

            #whole_line="$post_desc $post_date"

            #ssh "$whole_line"

            #echo "FAKE wp_post" >> $logfile
            wp_post="$(ssh wp_cli_user@172.16.208.20 -i ~/id_wp_cli_user_rsa "wp post create --post_content=\"$post_description\" --post_title=\"$post_title\" --post_date=\"$post_date\" --post_status=publish --post_type=podcasts $wp_meta --porcelain --path=/var/www/html/lifetalk.net/public_html/" < /dev/null)"
        #echo -e "\nwp_post is this: $wp_post\n"

        #echo "last $src_file"
        #Add taxonomy terms to new post.
        #echo "FAKE ssh" >> $logfile
            if [[ "$podcast_name_lcns" == "message-of-hope" ]] || [[ "$podcast_name_lcns" == "chip" ]]; then

                ssh wp_cli_user@172.16.208.20 -i ~/id_wp_cli_user_rsa "wp post term add $wp_post post_tag $post_artist_lcns --path=/var/www/html/lifetalk.net/public_html/" < /dev/null > /dev/null
                ssh wp_cli_user@172.16.208.20 -i ~/id_wp_cli_user_rsa "wp post term add $wp_post podcasts_cat $podcast_name_lcns $taxonomy_child_term  --path=/var/www/html/lifetalk.net/public_html/" < /dev/null > /dev/null

            else
                ssh wp_cli_user@172.16.208.20 -i ~/id_wp_cli_user_rsa "wp post term add $wp_post podcasts_cat $podcast_name_lcns $taxonomy_child_term  --path=/var/www/html/lifetalk.net/public_html/" < /dev/null > /dev/null
            fi

            echo "$src_file" >> "$logfile"

        else
            echo "$src_file" >> "$skipped_file"
        fi

    fi

done < "$output_file_from_upload"
